#import "uni.typ": *
#show: uni_style

#front_page(
  lab_name: [Исследование объектной модели документа (DOM) и системы
событий JavaScript],
  lab_number: 3,
  subject: ВЕБ,
)

= Цель

Исследовать структуру модели документа DOM. Изучить динамическую объектную
модель документа, предоставляемую стандартом DOM и систему событий языка
JavaScript, возможность хранения данных на стороне клиента. Приобрести
практические навыки работы с событиями JavaScript, деревом документа, Local
Storage и Cookies.

= Постановка задания

\1. Реализовать интерактивное графическое меню сайта, в соответствии со
следующими требованиями:

- при наведении мыши на соответствующий пункт меню изображение, соответствующее
  этому пункту меняется на другое (в том случае если этот пункт не активен,
  т.е. не загружена соответствующая ему страница);
- сделать пункт «Мои интересы» в виде выпадающего меню, каждый элемент которого
  ведет на соответствующую ему подсекцию данной страницы. Выпадающее меню
  реализовать с помощью тегов <ul> и <li>. Данный список должен раскрываться в
  зависимости от варианта задания:

- 1: Выпадающее меню раскрывается по наведению

\2. Реализовать отображение в области меню сайта текущих даты и времени
(обновление времени 1 раз в секунду). Формат даты определяется как остаток
от деления последней цифры зачетной книжки на 4:

- 3: ЧЧ Месяц ГГГГ

(«День недели» – полная запись дня недели на русском языке, «Месяц» – полная
запись названия месяца на русском языке)

\3. На странице «Контакт» добавить поле «Дата рождения», для которого
реализовать всплывающий снизу элемент «календарь». При этом элемент должен
давать возможность менять дату, месяц и год. Верстка элемента должна быть
выполнена с помощью тегов <div> и <select> (для выбора месяца и года). Варианты
задания элемента «календарь» приведены ниже:

Вариант Язык интерфейса Формат даты
- 3: English день.месяц.год

\4. Реализовать динамическую проверку корректности заполнения пользователем
формы на странице «Контакт» таким образом, чтобы при потере фокуса заполняемого
поля осуществлялась проверка корректности его заполнения. В случае если поле
заполнено корректно, оно должно быть подсвечено зеленым цветом, иначе оно
должно быть подсвечено красным, а после данного поля должна появиться надпись,
поясняющая характер ошибки. После исправления пользователем ошибки, надпись
должна ис83 чезнуть. Если все поля формы заполнены корректно, должна стать
активной кнопка «Отправить».

\5. Реализовать открытие в динамически формируемом новом окне (блоке DIV)
соответствующих больших фото при щелчке мыши по маленьким фото на странице
«Фотоальбом».

\6. Добавить страницу «История просмотра». На данной странице реализовать
отображение двух таблиц:

- «История текущего сеанса» – в данной таблице отображается количество
  посещений каждой страницы за время текущего сеанса. Реализовать хранение этих
  данных в Local Storage.
- «История за все время» – в данной таблице отображается количество посещений
  каждой страницы за все время. Реализовать хранение этих данных в хранилище
  Cookies. Для выполнения этого задания необходимо создать два JavaScript метода:
  getCookie (name) и setCookie(name, value, exlpiration_days).

Для реализации страницы «История просмотра» необходимо добавить на каждую
страницу вызов JavaScript функции, которая будет сохранять информацию о
просмотре страницы в Local Storage и Cookies.

= Ход работы

Код на JS представлен в #link(<attach>)[Приложении А].

#figure_img("/doc/1.png", caption: [Раскрытие меню при наведении], width: 69%)
#v(1.5em)
#figure_img("/doc/2.png", caption: [Часы], width: 69%)
#v(1.5em)
#figure_img("/doc/3.png", caption: [Календарь], width: 69%)
#v(1.5em)
#figure_img("/doc/4.png", caption: [Динамическая валидация формы], width: 69%)
#v(1.5em)
#figure_img("/doc/5.png", caption: [Открытие фото в увеличенном масштабе], width: 69%)
#v(1.5em)
#figure_img("/doc/6.png", caption: [История посещения], width: 69%)

= Вывод

Исследовать структуру модели документа DOM. Изучить динамическую объектную
модель документа, предоставляемую стандартом DOM и систему событий языка
JavaScript, возможность хранения данных на стороне клиента. Приобрести
практические навыки работы с событиями JavaScript, деревом документа, Local
Storage и Cookies.

В ходе выполнения работы исследована структура модули документа DOM, систему
событий JS и возможность зранения данных на стороне клиента.

Для скрипта по раскрытию меню при наведении мыши использовано события
mouseenter и mouseleave. Часы используют функцию setInterval для установки
частоты обновления. Календарь показывается при фокусе на строку ввода даты с
помощью событий focusin и click (для скрытия календаря). Валидация формы
контактов происходит на событие focusout и submit, а на reset происходит
очистка ошибок. Открытие фото в увеличеном масштабе используется событие click.
История посещений использует LocalStorage для зранения посещения за все время и
Cookies для зранения текущей сессии. Запись посещения на страницах происходит
по событию DOMContentLoaded.


#pagebreak()

#attachments(
  "/js/menu_reveal_on_hover.js",
  "/js/clock.js",
  "/js/calendar.js",
  "/js/callback_validation.js",
  "/js/photoalbum.js",
  "/js/history.js",
) <attach>
